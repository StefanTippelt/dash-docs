),
className='row'
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = Sepal.Length, y = Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
iris
iris$Sepal.Length
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')
),
className='row'
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = iris$Sepal.Length, y = iris$Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')
),
className='row'
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')
),
className='row'
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="scatter-color")
chart_link
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')
),
className='row'
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
print(subdata)
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')
),
className='row'
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
print(subdata)
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
return(dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width)))
}
)
app$run_server()
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')
),
className='row'
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
print(subdata)
return(dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Petal.Length)))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
}
else {
subdata <- iris[which(iris$Species == species),]
}
return(dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width)))
}
)
app$run_server()
library(dashR)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new(
external_stylesheets=list('https://codepen.io/chriddyp/pen/bWLwgP.css')
)
app$layout_set(htmlDiv(list(
dccDropdown(
options=list(
list(label="New York City", value="NYC"),
list(label="Montréal", value="MTL"),
list(label="San Francisco", value="SF")
),
value="MTL",
multi = TRUE,
id="my-dropdown"
),
htmlDiv(id="output-container")
)))
app$callback(output('output-container', 'children'),
list(input('my-dropdown', 'value')),
function(dropdown_value) {
sprintf("You have selected \"%s\"", dropdown_value)
})
app$run_server()
library(dashR)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new(
external_stylesheets=list('https://codepen.io/chriddyp/pen/bWLwgP.css')
)
app$layout_set(htmlDiv(list(
dccDropdown(
options=list(
list(label="New York City", value="NYC"),
list(label="Montréal", value="MTL"),
list(label="San Francisco", value="SF")
),
value="MTL",
multi = TRUE,
id="my-dropdown"
),
htmlDiv(id="output-container")
)))
app$run_server()
library(dashR)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new(
external_stylesheets=list('https://codepen.io/chriddyp/pen/bWLwgP.css')
)
app$layout_set(htmlDiv(list(
dccDropdown(
options=list(
list(label="New York City", value="NYC"),
list(label="Montréal", value="MTL"),
list(label="San Francisco", value="SF")
),
value="MTL",
multi = TRUE,
id="my-dropdown"
),
htmlDiv(id="output-container")
)))
app$run_server()
setwd("~/plotly/github/heroku/dashs-docs/dash-docs")
